# Set working directory here
setwd("../data")
# Read in GBI
gbi <- readRDS("gbi.RData")
setwd("C:/Users/bankh/My_Repos/dolphin-centrality/Code")
# Set working directory here
setwd("../data")
# Read in GBI
gbi <- readRDS("gbi.RData")
# Set working directory here
setwd("../Data")
# Read in aux data
aux <- readRDS("aux.RData")
# Set working directory here
setwd("../Data")
# Read in GBI
gbi <- readRDS("gbi.RData")
# Get the average group size for each ID
group_list <- lapply(gbi, function(group_matrix) {
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Create empty vectors to store results
ids <- character()
avg_group_sizes <- numeric()
# Iterate through each individual in the group
for (i in 1:ncol(group_matrix)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
# Calculate the average group size for the individual
group_size_non_zero <- group_size[group_size != 0]
avg_group_size <- mean(group_size_non_zero)
# Append the results to vectors
ids <- c(ids, individual_id)
avg_group_sizes <- c(avg_group_sizes, avg_group_size)
}
# Create a data frame for the current group
group_data <- data.frame(ID = ids,
Average_Group_Size = avg_group_sizes)
return(group_data)
})
# Add HI list
result_df <- readRDS("result_df.RData")
# Add HI list
result_df <- read.csv("result_df.csv")
result_df$Group_size <- ifelse(result_df$Period == "1-Before_HAB",
group_list[[1]]$Average_Group_Size[match(result_df$ID, group_list[[1]]$ID)],
ifelse(result_df$Period == "2-During_HAB",
group_list[[2]]$Average_Group_Size[match(result_df$ID, group_list[[2]]$ID)],
group_list[[3]]$Average_Group_Size[match(result_df$ID, group_list[[3]]$ID)]))
# Change the factor levels and add factor for Period
result_df$HI <- factor(result_df$HI, levels = c("NF", "BG", "FG", "SD"))
result_df$Period <- as.factor(result_df$Period)
if(!require(ggplot2)){install.packages('ggplot2'); library(ggplot2)}
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA) + # Remove outliers
geom_jitter(aes(color = HI), width = 0.2, alpha = 0.5) + # Set jitter points color and transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank())
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA) + # Remove outliers
geom_jitter(aes(color = HI), width = 0.2, alpha = 0.5) + # Set jitter points color and transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
theme_minimal() + # Minimal theme with no background
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank()) # Remove gridlines
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA) + # Remove outliers
geom_jitter(aes(color = HI), width = 0.2, alpha = 0.5) + # Set jitter points color and transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
theme_minimal() + # Minimal theme with no background
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank(), # Remove gridlines
panel.border = element_rect(color = "black", fill = NA)) # Add axis lines
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) + # Apply 50% shading to box color
geom_jitter(color = "black", width = 0.2, alpha = 0.5) + # Set jitter points to black with transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
theme_minimal() + # Minimal theme with no background
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank(), # Remove gridlines
panel.border = element_rect(color = "black", fill = NA)) # Add axis lines
if(!require(RColorBrewer)){install.packages('RColorBrewer'); library(RColorBrewer)} # plot themes
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) + # Apply 50% shading to box color
geom_jitter(color = "black", width = 0.2, alpha = 0.5) + # Set jitter points to black with transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
scale_fill_brewer(palette = "Set3") + # Apply a prettier color palette
theme_minimal() + # Minimal theme with no background
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank(), # Remove gridlines
panel.border = element_rect(color = "black", fill = NA)) # Add axis lines
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) + # Apply 50% shading to box color
geom_jitter(color = "black", width = 0.2, alpha = 0.5) + # Set jitter points to black with transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
scale_fill_brewer(palette = "Pastel1") + # Apply a prettier color palette
theme_minimal() + # Minimal theme with no background
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank(), # Remove gridlines
panel.border = element_rect(color = "black", fill = NA)) # Add axis lines
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) + # Apply 50% shading to box color
geom_jitter(color = "black", width = 0.2, alpha = 0.5) + # Set jitter points to black with transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
scale_fill_brewer(palette = "Paired") + # Apply a prettier color palette
theme_minimal() + # Minimal theme with no background
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank(), # Remove gridlines
panel.border = element_rect(color = "black", fill = NA)) # Add axis lines
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) + # Apply 50% shading to box color
geom_jitter(color = "black", width = 0.2, alpha = 0.5) + # Set jitter points to black with transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
scale_fill_brewer(palette = "Dark2") + # Apply a prettier color palette
theme_minimal() + # Minimal theme with no background
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank(), # Remove gridlines
panel.border = element_rect(color = "black", fill = NA)) # Add axis lines
